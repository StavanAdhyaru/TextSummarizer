/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Color;
import java.io.*;
import java.util.*;

import edu.stanford.nlp.coref.CorefCoreAnnotations;
import edu.stanford.nlp.coref.data.CorefChain;
import edu.stanford.nlp.io.*;
import edu.stanford.nlp.ling.*;
import edu.stanford.nlp.pipeline.*;
import edu.stanford.nlp.semgraph.SemanticGraph;
import edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations;
import edu.stanford.nlp.semgraph.SemanticGraphEdge;
import edu.stanford.nlp.sentiment.SentimentCoreAnnotations;
import edu.stanford.nlp.trees.*;
import edu.stanford.nlp.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.DefaultHighlighter;

/**
 *
 * @author SAYA
 */
public class SSummarizer extends javax.swing.JFrame {

    /**
     * Creates new form SSummarizer
     */
    public SSummarizer() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.    
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        generateSummary = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        summarytext = new javax.swing.JTextArea();
        querytext = new javax.swing.JTextField();
        SSummaryText = new javax.swing.JLabel();
        sourcetextlbl = new javax.swing.JLabel();
        Keywords = new javax.swing.JLabel();
        jSlider2 = new javax.swing.JSlider();
        perText = new javax.swing.JLabel();
        sourceLines = new javax.swing.JLabel();
        sourceChar = new javax.swing.JLabel();
        sourceWords = new javax.swing.JLabel();
        summaryChar = new javax.swing.JLabel();
        summaryWords = new javax.swing.JLabel();
        summaryLines = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        keywords = new javax.swing.JTextArea();
        queryRadio = new javax.swing.JRadioButton();
        exeTime = new javax.swing.JLabel();
        jSchrollPane = new javax.swing.JScrollPane();
        sourceTextArea = new javax.swing.JTextArea();
        regenerateSummary = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        NewMenuItem = new javax.swing.JMenuItem();
        OpenMenuItem = new javax.swing.JMenuItem();
        SaveMenuItem = new javax.swing.JMenuItem();
        LoadMenuItem = new javax.swing.JMenuItem();
        ExitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        EvalMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        AboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Subjective Summarization");
        setName("Subjective Summarizer"); // NOI18N
        setResizable(false);

        generateSummary.setText("Generate Summary");
        generateSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateSummaryActionPerformed(evt);
            }
        });

        summarytext.setEditable(false);
        summarytext.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(summarytext);

        querytext.setEnabled(false);

        SSummaryText.setLabelFor(SSummaryText);
        SSummaryText.setText("Subjective Summary:");

        sourcetextlbl.setText("Source Text:");

        Keywords.setText("Candidate Set:");

        jSlider2.setMajorTickSpacing(20);
        jSlider2.setMinorTickSpacing(5);
        jSlider2.setPaintLabels(true);
        jSlider2.setPaintTicks(true);
        jSlider2.setToolTipText("Summary Length");
        jSlider2.setBorder(javax.swing.BorderFactory.createTitledBorder("Summary Length"));
        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });

        perText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        perText.setText("50 %");
        perText.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        sourceLines.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        sourceLines.setText("Lines:");
        sourceLines.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        sourceChar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        sourceChar.setText("Charaters: ");
        sourceChar.setToolTipText("");
        sourceChar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        sourceWords.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        sourceWords.setText("Words:");
        sourceWords.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        summaryChar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        summaryChar.setText("Charaters:");
        summaryChar.setToolTipText("");
        summaryChar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        summaryWords.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        summaryWords.setText("Words:");
        summaryWords.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        summaryLines.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        summaryLines.setText("Lines:");
        summaryLines.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        keywords.setEditable(false);
        keywords.setColumns(20);
        keywords.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        keywords.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane4.setViewportView(keywords);

        queryRadio.setText("Query Text: ");
        queryRadio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                queryRadioStateChanged(evt);
            }
        });
        queryRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryRadioActionPerformed(evt);
            }
        });

        exeTime.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        exeTime.setText("Execution Time:");

        sourceTextArea.setColumns(20);
        sourceTextArea.setRows(5);
        jSchrollPane.setViewportView(sourceTextArea);
        sourceTextArea.getAccessibleContext().setAccessibleParent(jScrollPane4);

        regenerateSummary.setText("ReGenerate Summary");
        regenerateSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regenerateSummaryActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        NewMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        NewMenuItem.setText("New");
        NewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(NewMenuItem);

        OpenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        OpenMenuItem.setText("Open");
        OpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(OpenMenuItem);

        SaveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveMenuItem.setText("Save");
        SaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(SaveMenuItem);

        LoadMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        LoadMenuItem.setText("Load");
        LoadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(LoadMenuItem);

        ExitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        ExitMenuItem.setText("Exit");
        ExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(ExitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");

        EvalMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        EvalMenuItem.setText("Evaluate Summary");
        EvalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EvalMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(EvalMenuItem);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem1.setText("Show Lexical Chain");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Show Candidate Set");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("About");

        AboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        AboutMenuItem.setText("About us");
        AboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(AboutMenuItem);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(querytext)
                            .addComponent(sourcetextlbl)
                            .addComponent(sourceLines, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sourceWords, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                            .addComponent(sourceChar, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(queryRadio)
                            .addComponent(jSchrollPane))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(summaryLines, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(summaryWords, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(summaryChar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(SSummaryText)
                                            .addComponent(Keywords))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane4))
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(perText)
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(exeTime, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(generateSummary)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(regenerateSummary)))
                        .addContainerGap(99, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Keywords, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(queryRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SSummaryText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(querytext, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sourcetextlbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSchrollPane)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sourceChar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sourceWords)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sourceLines))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(summaryChar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(summaryWords)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(summaryLines)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSlider2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(perText)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(exeTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(generateSummary, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(regenerateSummary, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)))
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-798)/2, (screenSize.height-637)/2, 798, 637);
    }// </editor-fold>//GEN-END:initComponents

    private void generateSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateSummaryActionPerformed
            // TODO add your handling code here:
            PrintWriter out = new PrintWriter(System.out);
            String Text = "Kosgi Santosh sent an email to Stanford University. He didn't get a reply.";
            Properties props = new Properties();
            props.setProperty("annotators", "tokenize, ssplit, pos, lemma, ner, parse, dcoref, sentiment");
            StanfordCoreNLP pipeline = new StanfordCoreNLP(props);
            Annotation annotation;
            annotation = new Annotation("Kosgi Santosh sent an email to Stanford University. He didn't get a reply.");
            pipeline.annotate(annotation);
            //pipeline.prettyPrint(annotation, xmlOut);
            List<CoreMap> sentences = annotation.get(CoreAnnotations.SentencesAnnotation.class);
    if (sentences != null && ! sentences.isEmpty()) {
      CoreMap sentence = sentences.get(0);
      out.println("The keys of the first sentence's CoreMap are:");
      out.println(sentence.keySet());
      out.println();
      out.println("The first sentence is:");
      out.println(sentence.toShorterString());
      out.println();
      out.println("The first sentence tokens are:");
      for (CoreMap token : sentence.get(CoreAnnotations.TokensAnnotation.class)) {
        out.println(token.toShorterString());
      }
      Tree tree = sentence.get(TreeCoreAnnotations.TreeAnnotation.class);
      out.println();
      out.println("The first sentence parse tree is:");
      tree.pennPrint(out);
      out.println();
      out.println("The first sentence basic dependencies are:");
      out.println(sentence.get(SemanticGraphCoreAnnotations.BasicDependenciesAnnotation.class).toString(SemanticGraph.OutputFormat.LIST));
      out.println("The first sentence collapsed, CC-processed dependencies are:");
      SemanticGraph graph = sentence.get(SemanticGraphCoreAnnotations.CollapsedCCProcessedDependenciesAnnotation.class);
      out.println(graph.toString(SemanticGraph.OutputFormat.LIST));

      // Print out dependency structure around one word
      // This give some idea of how to navigate the dependency structure in a SemanticGraph
      IndexedWord node = graph.getNodeByIndexSafe(5);
      // The below way also works
      // IndexedWord node = new IndexedWord(sentences.get(0).get(CoreAnnotations.TokensAnnotation.class).get(5 - 1));
      out.println("Printing dependencies around \"" + node.word() + "\" index " + node.index());
      List<SemanticGraphEdge> edgeList = graph.getIncomingEdgesSorted(node);
      if (! edgeList.isEmpty()) {
        assert edgeList.size() == 1;
        int head = edgeList.get(0).getGovernor().index();
        String headWord = edgeList.get(0).getGovernor().word();
        String deprel = edgeList.get(0).getRelation().toString();
        out.println("Parent is word \"" + headWord + "\" index " + head + " via " + deprel);
      } else  {
        out.println("Parent is ROOT via root");
      }
      edgeList = graph.outgoingEdgeList(node);
      for (SemanticGraphEdge edge : edgeList) {
        String depWord = edge.getDependent().word();
        int depIdx = edgeList.get(0).getDependent().index();
        String deprel = edge.getRelation().toString();
        out.println("Child is \"" + depWord + "\" (" + depIdx + ") via " + deprel);
      }
      out.println();


      // Access coreference. In the coreference link graph,
      // each chain stores a set of mentions that co-refer with each other,
      // along with a method for getting the most representative mention.
      // Both sentence and token offsets start at 1!
      out.println("Coreference information");
      Map<Integer, CorefChain> corefChains =
          annotation.get(CorefCoreAnnotations.CorefChainAnnotation.class);
      if (corefChains == null) { return; }
      for (Map.Entry<Integer,CorefChain> entry: corefChains.entrySet()) {
        out.println("Chain " + entry.getKey());
        for (CorefChain.CorefMention m : entry.getValue().getMentionsInTextualOrder()) {
          // We need to subtract one since the indices count from 1 but the Lists start from 0
          List<CoreLabel> tokens = sentences.get(m.sentNum - 1).get(CoreAnnotations.TokensAnnotation.class);
          // We subtract two for end: one for 0-based indexing, and one because we want last token of mention not one following.
          out.println("  " + m + ", i.e., 0-based character offsets [" + tokens.get(m.startIndex - 1).beginPosition() +
                  ", " + tokens.get(m.endIndex - 2).endPosition() + ')');
        }
      }
      out.println();

      out.println("The first sentence overall sentiment rating is " + sentence.get(SentimentCoreAnnotations.SentimentClass.class));
    }        
    }//GEN-LAST:event_generateSummaryActionPerformed

    private void OpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpenMenuItemActionPerformed

    private void ExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ExitMenuItemActionPerformed

    private void querytextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_querytextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_querytextActionPerformed

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jSlider2StateChanged

    private void NewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NewMenuItemActionPerformed

    private void AboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AboutMenuItemActionPerformed

    private void SaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuItemActionPerformed
    }//GEN-LAST:event_SaveMenuItemActionPerformed

    private void EvalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EvalMenuItemActionPerformed
    }//GEN-LAST:event_EvalMenuItemActionPerformed

    private void queryRadioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_queryRadioStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_queryRadioStateChanged

    private void queryRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryRadioActionPerformed
    }//GEN-LAST:event_queryRadioActionPerformed

    private void LoadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadMenuItemActionPerformed
    }//GEN-LAST:event_LoadMenuItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void regenerateSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regenerateSummaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_regenerateSummaryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SSummarizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SSummarizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SSummarizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SSummarizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SSummarizer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutMenuItem;
    private javax.swing.JMenuItem EvalMenuItem;
    private javax.swing.JMenuItem ExitMenuItem;
    private javax.swing.JLabel Keywords;
    private javax.swing.JMenuItem LoadMenuItem;
    private javax.swing.JMenuItem NewMenuItem;
    private javax.swing.JMenuItem OpenMenuItem;
    private javax.swing.JLabel SSummaryText;
    private javax.swing.JMenuItem SaveMenuItem;
    private javax.swing.JLabel exeTime;
    public static javax.swing.JButton generateSummary;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    public static javax.swing.JScrollPane jSchrollPane;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSlider jSlider2;
    public static javax.swing.JTextArea keywords;
    private javax.swing.JLabel perText;
    private javax.swing.JRadioButton queryRadio;
    public static javax.swing.JTextField querytext;
    private javax.swing.JButton regenerateSummary;
    private javax.swing.JLabel sourceChar;
    private javax.swing.JLabel sourceLines;
    public static javax.swing.JTextArea sourceTextArea;
    private javax.swing.JLabel sourceWords;
    private javax.swing.JLabel sourcetextlbl;
    private javax.swing.JLabel summaryChar;
    private javax.swing.JLabel summaryLines;
    private javax.swing.JLabel summaryWords;
    public static javax.swing.JTextArea summarytext;
    // End of variables declaration//GEN-END:variables

    private class MyHighlightPainter extends DefaultHighlighter.DefaultHighlightPainter {

        public MyHighlightPainter(Color color) {
            super(color);
        }
    }
}
